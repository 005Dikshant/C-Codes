#include <iostream>
using namespace std;
void inplaceHeapSort(int input[], int n){
    // min priorty queue or min heap

    // now insert first this in min heap taking care we are using inplace heap
    for(int i = 0; i < n; i++){ // O(n)
        int childIndex = i;
        while(childIndex > 0){ // O(logn)
            int parentIndex = (childIndex - 1)/2;

            if(input[parentIndex] > input[childIndex]){
                int temp = input[parentIndex];
                input[parentIndex] = input[childIndex];
                input[childIndex] = temp;
                childIndex = parentIndex;
            }else{
                break;
            }
        }
    }    
    // min-remove function  will sort the array in decreasing order 
    int last = n;
    for(int i = 0; i < n; i++){
        
        last = n - (i + 1);
        int temp = input[last];
        input[last] = input[0];
        input[0] = temp;

        int leftchild = 2 * 0 + 1;
        int rightchild = 2 * 0 + 2;

        int parentIndex = 0,tempIndex = 0;
        while(leftchild < last){
            if(input[tempIndex] > input[leftchild]){
                tempIndex = leftchild;
            }
            if(rightchild < last && input[tempIndex] > input[rightchild]){
                tempIndex = rightchild;
            }

            if(tempIndex == parentIndex){
                break;
            }
            
            int tempData = input[tempIndex];
            input[tempIndex] = input[parentIndex];
            input[parentIndex] = tempData;

            parentIndex = tempIndex;

            leftchild = parentIndex * 2 + 1;
            rightchild = parentIndex * 2 + 2;
            
        }
    }
}
int main() {
    int n;
    cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }
    inplaceHeapSort(arr,n);
    
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
}

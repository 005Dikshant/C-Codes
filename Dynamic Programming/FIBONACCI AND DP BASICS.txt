#include <iostream>
using namespace std;

// Space Complexity is more than DP, a top down approach hence using Recursion to solve, and hence called Memoziation can cannot be called DP.
/*
n = 6 (Memoziation) array status(getting filled) O(n)
arr[6] -> arr[5] -> arr[4] -> arr[3] -> arr[2] -> arr[1] -> arr[0]
arr[6] <- arr[5] <- arr[4] <- arr[3] <- arr[2] <- arr[1] <- arr[0]

n = 6 (less space complexity) in DP O(n)
arr[0] -> arr[1] -> arr[2] -> arr[3] -> arr[4] -> arr[5] -> arr[6]

n = 6 (Brute Force) O(2^n)

So steps for DP :-
1. Brute Force (can be mostly recursive)(top down with no extra saving)
2. Memoziation (top down with saving extra calls)
3. DP (bottom up)(iterative)

BruteForce -> Memoziation -> DP
*/
int Memoziationfibo(int n,int *arr){
    if(n <= 1){ 
        return n;
    }
    if(arr[n] != -1){
        return arr[n];
    }
    int a = dpfibo(n-1,arr);
    int b = dpfibo(n-2,arr);

    arr[n] = a + b;
    return arr[n];
}
int fibo_2(int n){
    int *arr = new int[n+1];
    for(int i = 0; i < (n+1); i++){
        arr[i] = -1;
    }
    return Memoziationfibo(n,arr);
}

// DP is iterative approach using less space complexity and it is bottom approach
int fibo(int n){
    if(n <= 1){
        return n;
    }
    return fibo(n-1) + fibo(n-2);
}
int main() {
  //cout << fibo_2(35) << endl;
  cout << fibo(35) << endl;
}
